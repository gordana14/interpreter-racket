#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 92 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 63 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 107 142 35
224 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 2896 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; ============== BASICS ======================"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"const"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:guard"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 5 #"typen"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                              "
0 0 14 3 1 #"n"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"Variable is not integer in Racket \""
0 0 24 3 8 #" ))))   "
0 0 17 3 36 #"; CONSTANT, int IS AN INTEGER NUMBER"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"bool"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:guard"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 6 #"type-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                           [("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 1 #"b"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 6 #"type-b"
0 0 24 3 1 #" "
0 0 19 3 35 #"\"Variable is not boolean in Racket\""
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 13 #")])))        "
0 0 17 3 24 #"; b CAN BE true OR false"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:guard"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                              [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"bool?"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #") ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"bool?"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"Not valid pair\""
0 0 24 3 5 #")])))"
0 0 17 3 27 #"; e1 and e2 are expressions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"interval"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 23 3 7 #"#:guard"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 5 #"inter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 5 #"))  ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 9 #"Variables"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 7 #"integer"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 6 #"Racket"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 12 #"right order\""
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"nil"
0 0 24 3 4 #" () "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50
#";============Processing and control \357\254\202ow========="
0 0 24 29 1 #"\n"
0 0 17 3 10 #";condition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 12 #"if-then-else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #" ) "
0 0 24 29 1 #"\n"
0 0 17 3 14 #";type checking"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"is-const"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 7 #"is-bool"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 11 #"is-interval"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"is-nil"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";opertions "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"negate"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"add"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"multiply"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 12 #"exponentiate"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 7 #"greater"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 9 #"intersect"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; ============== REGISTER ======================"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";variables"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #" ) "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"valof"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; ============== FUNCTIONS ======================"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";(script name body) procedures"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"script"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";functions (function name fargs body)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"function"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"farg"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";(call e args) is used for calling the functions/procedures."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"call"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 202
(
 #";When interpreter evaluates construct (fun ...) it transforms it to "
 #"(envelope env f) where f is the original function construct and env "
 #"is the environment in which the function definition was evaluated."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 7 #"closure"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; ============== INTERPRETER ======================"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";interpreter"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 9           7 21           0 0           0 0           0 0 0 24 29 1
#"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 9          13 21           0 0           0 1 0 24 29 1 #"\n"
0           0 0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"bool?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #" ) "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 22 #";part for brave people"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"with?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 15 3 9 #"with-vars"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 15 3 6 #"with-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 17 3 50 #";add function to the envirement (didn't implement)"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"iv"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 16 #"makehashfromlist"
0 0 24 3 2 #" ("
0 0 14 3 10 #"hash->list"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 3 #") ("
0 0 14 3 10 #"hash->list"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 6 #"))))] "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"valof?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"valof-s"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Error - variable does not exist\""
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 10 #";functions"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"script?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 2 #"] "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 9 #"function?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 7 #"closure"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 9           7 21           0 0           0 0           0 0 0 24 29 1
#"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"call?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"en"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 6 #"call-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"closure?"
0 0 24 3 1 #" "
0 0 14 3 2 #"en"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"fargs"
0 0 24 3 2 #" ("
0 0 14 3 13 #"function-farg"
0 0 24 3 2 #" ("
0 0 14 3 9 #"closure-f"
0 0 24 3 1 #" "
0 0 14 3 2 #"en"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 2 #"iv"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"call-arg"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                              )  "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 13 #"function-body"
0 0 24 3 2 #" ("
0 0 14 3 9 #"closure-f"
0 0 24 3 1 #" "
0 0 14 3 2 #"en"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 8 #"hash-set"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"update"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 5 #"fargs"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 13 #"function-name"
0 0 24 3 1 #"("
0 0 14 3 9 #"closure-f"
0 0 24 3 1 #" "
0 0 14 3 2 #"en"
0 0 24 3 3 #")) "
0 0 14 3 2 #"en"
0 0 24 3 7 #")))]))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 11 #"; [(script?"
0 0 17 3 1 #" "
0 0 17 3 2 #"en"
0 0 17 3 3 #") ("
0 0 17 3 2 #"iv"
0 0 17 3 2 #" ("
0 0 17 3 4 #"with"
0 0 17 3 13 #" (script-name"
0 0 17 3 1 #" "
0 0 17 3 2 #"en"
0 0 17 3 2 #") "
0 0 17 3 2 #"en"
0 0 17 3 32 #" (script-body en)) environment)]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 122
(
 #";[(script? en) (iv (script-body en ) (makehashfromlist (hash->list ("
 #"hash-set en ) (script-body en ))) (hash->list env))))]"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 5 #"; ))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 9        1219 21           0 0           0 202 0 24 3 12
#"          [("
0 0 14 3 5 #"call?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"res"
0 0 24 3 2 #" ("
0 0 14 3 2 #"mi"
0 0 24 3 2 #" ("
0 0 14 3 2 #"mi"
0 0 24 3 2 #" ("
0 0 14 3 6 #"call-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 2 #"mi"
0 0 24 3 2 #" ("
0 0 14 3 9 #"call-args"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               [("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 5 #"body1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 4 #"env1"
0 0 24 3 2 #" ("
0 0 14 3 2 #"a1"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"mi"
0 0 24 3 1 #" "
0 0 14 3 5 #"body1"
0 0 24 3 1 #" "
0 0 14 3 4 #"env1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               [("
0 0 14 3 8 #"envelope"
0 0 24 3 1 #" "
0 0 14 3 4 #"env1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 6 #"fargs1"
0 0 24 3 1 #" "
0 0 14 3 5 #"body1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 4 #"env2"
0 0 24 3 2 #" ("
0 0 14 3 2 #"a2"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 1 #" "
0 0 14 3 4 #"env1"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 4 #"env3"
0 0 24 3 2 #" ("
0 0 14 3 8 #"add-args"
0 0 24 3 1 #" "
0 0 14 3 6 #"fargs1"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 4 #"env2"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"mi"
0 0 24 3 1 #" "
0 0 14 3 5 #"body1"
0 0 24 3 1 #" "
0 0 14 3 4 #"env3"
0 0 24 3 6 #"))]))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 9 #"function?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"fargs"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 5 #")]   "
0 0 17 3 40 #"; FUNCTION DEFINITION STORED AS CLOSURE`"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 4 #"//on"
0 0 24 3 1 #" "
0 0 14 3 4 #"this"
0 0 24 3 1 #" "
0 0 14 3 3 #"way"
0 0 24 3 1 #" "
0 0 14 3 2 #"it"
0 0 24 3 1 #" "
0 0 14 3 4 #"does"
0 0 24 3 1 #" "
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 4 #"work"
0 0 24 3 2 #"  "
0 0 14 3 7 #"example"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 13 #"if-then-else?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 14 #"if-then-else-b"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"bool?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 15 #"if-then-else-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 15 #"if-then-else-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 4 #")))]"
0           0 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 10 #";Branching"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 13 #"if-then-else?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 9 #"condition"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 14 #"if-then-else-b"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"bool?"
0 0 24 3 1 #" "
0 0 14 3 7 #"conditi"
0 0 14 3 2 #"on"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bool-b"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 15 #"if-then-else-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 15 #"if-then-else-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               )"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"cond not bool\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           ))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 74
(
 #"; Type queries (is-const? e), (is-bool? e), (is-interval? e), (is-ni"
 #"l? e):"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 3 #";if"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 13 #"Intervaluator"
0 0 17 3 1 #" "
0 0 17 3 10 #"expression"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"then"
0 0 17 3 2 #" ("
0 0 17 3 9 #"is-const?"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 1 #")"
0 0 17 3 1 #","
0 0 17 3 2 #" ("
0 0 17 3 8 #"is-bool?"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 1 #")"
0 0 17 3 1 #","
0 0 17 3 2 #" ("
0 0 17 3 12 #"is-interval?"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 17 #") and (is-nil? e)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 9 #";evaluate"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 7 #"logical"
0 0 17 3 25 #" values in Intervaluator,"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 6 #";which"
0 0 17 3 1 #" "
0 0 17 3 3 #"are"
0 0 17 3 1 #" "
0 0 17 3 5 #"true "
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"value"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 7 #"results"
0 0 17 3 3 #" by"
0 0 17 3 11 #" evaluating"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 5 #"const"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"bool"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 8 #"interval"
0 0 17 3 1 #" "
0 0 17 3 2 #"or"
0 0 17 3 1 #" "
0 0 17 3 3 #"nil"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 34 #"respectively, and false otherwise."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 57 #";is const can not call for expr that is not simple       "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 9 #"is-const?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" [ ("
0 0 14 3 6 #"const?"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"is-const-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"is-bool?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"bool?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-bool-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 9         703 21           0 0           0 116 0 24 3 13
#"             "
0 0 24 3 2 #"[("
0 0 14 3 9 #"is-const?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" [ ("
0 0 14 3 6 #"const?"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"is-const-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"[("
0 0 14 3 8 #"is-bool?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"bool?"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"is-bool-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #")) ( "
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #")) "
0 0 14 3 1 #"e"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 68
(
 #"\"Variables are not integer in Racket and are not in the right order"
 #"\""
) 0 0 24 3 5 #")]))]"
0           0 0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 9          13 21           0 0           0 1 0 24 29 1 #"\n"
0           0 0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"is-interval?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 9 #"interval?"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"is-interval-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"is-nil?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 8 #"is-nil-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"nil?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 2 #"; "
0 0 17 3 8 #"Negation"
0 0 17 3 2 #" ("
0 0 17 3 6 #"negate"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 1 #")"
0 0 17 3 1 #":"
0 0 17 3 1 #" "
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 14 #" Intervaluator"
0 0 17 3 1 #" "
0 0 17 3 10 #"expression"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"then"
0 0 17 3 2 #" ("
0 0 17 3 6 #"negate"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 2 #") "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 8 #"negation"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 39 #"the value that results by evaluating e."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 9 #";Negating"
0 0 17 3 1 #" "
0 0 17 3 7 #"logical"
0 0 17 3 1 #" "
0 0 17 3 6 #"values"
0 0 17 3 1 #" "
0 0 17 3 6 #"yields"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 8 #"opposite"
0 0 17 3 1 #" "
0 0 17 3 7 #"logical"
0 0 17 3 1 #" "
0 0 17 3 5 #"value"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 8 #"negating"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 9 #"numerical"
0 0 17 3 1 #" "
0 0 17 3 5 #"value"
0 0 17 3 1 #" "
0 0 17 3 1 #"v"
0 0 17 3 1 #" "
0 0 17 3 6 #"yields"
0 0 17 3 1 #" "
0 0 17 3 4 #"\342\210\222v"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 8 #"negating"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 35 #"interval [a, b] yields [\342\210\222b,\342\210\222a]."
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"negate?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 8 #"negate-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"const-n"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 5 #"bool?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bool-b"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 12 #"is-interval?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #" ) ("
0 0 14 3 8 #"interval"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 21 3 2 #"#t"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"negation error\""
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"add?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #")("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 6 #"add-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 2 #"v2"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 6 #"add-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" [ ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 2 #")("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"const"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"const-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"const-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"interval"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"const-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"const-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 2 #")("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 3 #"and"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"interval"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"const-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"const-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #")("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"interval"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 24 3 1 #"("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"Addition error\""
0 0 24 3 3 #") ]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                     ))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 121
(
 #";If v1 and v2 are intervals [a, b] and [c, d], then the result is an"
 #" interval [min{ac, ad, bc, bd}, max{ac, ad, bc, bd}]."
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 9 #"multiply?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 11 #"multiply-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 2 #"v2"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 11 #"multiply-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"const"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"const-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"const-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 5 #"))) ]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"interval"
0 0 24 3 2 #" ("
0 0 14 3 3 #"min"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 3 #"max"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                    )] ))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 126
(
 #";if e is an Intervaluator expression, then (exponentiate e) is the e"
 #"xponentiation of the value v that results by evaluating e."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 3 #";If"
0 0 17 3 1 #" "
0 0 17 3 1 #"v"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 9 #"numerical"
0 0 17 3 1 #" "
0 0 17 3 5 #"value"
0 0 17 3 1 #" "
0 0 17 3 1 #"v"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"then"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 6 #"result"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 9 #"numerical"
0 0 17 3 1 #" "
0 0 17 3 5 #"value"
0 0 17 3 1 #" "
0 0 17 3 3 #"ev."
0 0 17 3 1 #" "
0 0 17 3 2 #"If"
0 0 17 3 1 #" "
0 0 17 3 1 #"v"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 8 #"interval"
0 0 17 3 2 #" ["
0 0 17 3 1 #"a"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 1 #"]"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"then"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 6 #"result"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 22 #" an interval [ea, eb]."
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 13 #"exponentiate?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 14 #"exponentiate-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"const-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                               [("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"interval"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"expt"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"Exponentiate error\""
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 97
(
 #";Extraction (left e), (right e): if e is an Intervaluator expression"
 #", then (left e) and (right e)"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 4 #";are"
0 0 17 3 1 #" "
0 0 17 3 11 #"extractions"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"value"
0 0 17 3 1 #" "
0 0 17 3 1 #"v"
0 0 17 3 30 #" that results by evaluating e."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 3 #";If"
0 0 17 3 1 #" "
0 0 17 3 1 #"v"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 4 #"pair"
0 0 17 3 2 #" ("
0 0 17 3 1 #"a"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 1 #")"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"then"
0 0 17 3 2 #" ("
0 0 17 3 4 #"left"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 2 #") "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 2 #" ("
0 0 17 3 5 #"right"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 2 #") "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 2 #"b."
0 0 17 3 1 #" "
0 0 17 3 2 #"If"
0 0 17 3 1 #" "
0 0 17 3 1 #"v"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 8 #"interval"
0 0 17 3 2 #" ["
0 0 17 3 1 #"a"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 1 #"]"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"then"
0 0 17 3 2 #" ("
0 0 17 3 4 #"left"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 2 #") "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 9 #"numerical"
0 0 17 3 1 #" "
0 0 17 3 5 #"value"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 2 #" ("
0 0 17 3 5 #"right"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 2 #") "
0 0 17 3 26 #"is a numerical value of b."
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"left?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 6 #"left-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pair-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Extracation left error\""
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"right?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 6 #"left-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pair-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        [("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"Extracation right error\""
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 127
(
 #";if e1 and e2 are Intervaluator expressions, then (greater e1 e2) is"
 #" an expression in Intervaluator that represents comparison."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 4 #";If "
0 0 17 3 2 #"v1"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 2 #"v2"
0 0 17 3 1 #" "
0 0 17 3 3 #"are"
0 0 17 3 1 #" "
0 0 17 3 9 #"numerical"
0 0 17 3 1 #" "
0 0 17 3 6 #"values"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 6 #"result"
0 0 17 3 1 #" "
0 0 17 3 2 #"by"
0 0 17 3 1 #" "
0 0 17 3 10 #"evaluating"
0 0 17 3 1 #" "
0 0 17 3 2 #"e1"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 2 #"e2"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 12 #"respectively"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"then"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 6 #"result"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 2 #" ("
0 0 17 3 4 #"bool"
0 0 17 3 1 #" "
0 0 17 3 2 #"#t"
0 0 17 3 2 #") "
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 2 #"v1"
0 0 17 3 1 #" "
0 0 17 3 18 #"> v2 and (bool #f)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 11 #";otherwise."
0 0 17 3 1 #" "
0 0 17 3 2 #"If"
0 0 17 3 1 #" "
0 0 17 3 2 #"v1"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 2 #"v2"
0 0 17 3 1 #" "
0 0 17 3 3 #"are"
0 0 17 3 1 #" "
0 0 17 3 9 #"intervals"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 6 #"result"
0 0 17 3 1 #" "
0 0 17 3 2 #"by"
0 0 17 3 1 #" "
0 0 17 3 10 #"evaluating"
0 0 17 3 1 #" "
0 0 17 3 2 #"e1"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 2 #"e2"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 12 #"respectively"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"then"
0 0 17 3 1 #" "
0 0 17 3 23 #"the result is (bool #t)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 3 #";if"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"width"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 2 #"v1"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 8 #"strictly"
0 0 17 3 1 #" "
0 0 17 3 7 #"greater"
0 0 17 3 1 #" "
0 0 17 3 4 #"than"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"width"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 2 #"v2"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 2 #" ("
0 0 17 3 4 #"bool"
0 0 17 3 1 #" "
0 0 17 3 2 #"#f"
0 0 17 3 2 #") "
0 0 17 3 10 #"otherwise."
0 0 17 3 1 #" "
0 0 17 3 3 #"The"
0 0 17 3 1 #" "
0 0 17 3 5 #"width"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 8 #"interval"
0 0 17 3 2 #" ["
0 0 17 3 1 #"a"
0 0 17 3 14 #", b] is b - a."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"greater?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 10 #"greater-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 2 #"v2"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 10 #"greater-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 7 #"const-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"const-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 2 #")("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"-"
0 0 24 3 1 #"("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #")("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #") )"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         ))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 135
(
 #";Intersection (intersect e1 e2): if e1 and e2 are Intervaluator expr"
 #"essions that evaluate to intervals [a, b] and [c, d], respectively,"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 5 #";then"
0 0 17 3 2 #" ("
0 0 17 3 9 #"intersect"
0 0 17 3 1 #" "
0 0 17 3 2 #"e1"
0 0 17 3 1 #" "
0 0 17 3 2 #"e2"
0 0 17 3 2 #") "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 8 #"interval"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 13 #"Intervaluator"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 6 #"result"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 12 #"intersection"
0 0 17 3 2 #" ["
0 0 17 3 1 #"a"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 2 #"] "
0 0 17 3 3 #"\342\210\251"
0 0 17 3 2 #" ["
0 0 17 3 1 #"c"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 1 #"d"
0 0 17 3 2 #"] "
0 0 17 3 2 #"or"
0 0 17 3 2 #" ("
0 0 17 3 3 #"nil"
0 0 17 3 1 #")"
0 0 17 3 31 #", if the intersection is empty."
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 10 #"intersect?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 12 #"intersect-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 2 #"v2"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 12 #"intersect-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"interval?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 4 #" ) ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"nil"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ["
0 0 14 3 4 #"else"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"interval"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interval-e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"Intersect error\""
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";macro"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"subtract"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"negate"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"greater"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"equal"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"if-then-else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"greater"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #") ("
0 0 14 3 12 #"if-then-else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";aux functon"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"update"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"update"
0 0 24 3 3 #" ( "
0 0 14 3 8 #"hash-set"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"makehashfromlist"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"make-immutable-hash"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getCommonEnv"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 2 #") "
0 0 14 3 4 #"null"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 11 #"set-member?"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 12 #"getCommonEnv"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 3 #"set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"getCommonEnv"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 3 #"set"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 17 3 5 #";test"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 8 #"is-const"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")) "
0 0 14 3 4 #"null"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 7 #"is-bool"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")) "
0 0 14 3 4 #"null"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 6 #"is-nil"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")) "
0 0 14 3 4 #"null"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 8 #"interval"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #" ) ("
0 0 14 3 5 #"valof"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"t\""
0 0 24 3 4 #")) ("
0 0 14 3 4 #"hash"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"t\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 5 #"))) ("
0 0 14 3 8 #"interval"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 12 #"if-then-else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"is-const"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"hash"
0 0 24 3 5 #"))  ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 3 #" ( "
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 12 #"if-then-else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"is-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 3 #"add"
0 0 24 3 1 #"("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #") ) ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 14 3 4 #"null"
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 3 #" ( "
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 7 #"greater"
0 0 24 3 2 #" ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #")) "
0 0 14 3 4 #"null"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 8 #"subtract"
0 0 24 3 2 #" ("
0 0 14 3 5 #"valof"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"hash"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 4 #"call"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"function"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"fact\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 8 #"multiply"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"iv"
0 0 24 3 2 #" ("
0 0 14 3 4 #"call"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"function"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"fact\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 12 #"if-then-else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"greater"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"valof"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 8 #"multiply"
0 0 24 3 2 #" ("
0 0 14 3 5 #"valof"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"call"
0 0 24 3 2 #" ("
0 0 14 3 5 #"valof"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"fact\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"subtract"
0 0 24 3 2 #" ("
0 0 14 3 5 #"valof"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 2 #"))"
0           0
